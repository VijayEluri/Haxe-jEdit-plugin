<?xml version="1.0"?>
<book xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation='http://www.docbook.org/xsd/4.4/docbook.xsd' >
<!-- :wrap=soft:maxLineLen=0: -->
<title>Haxe SideKick Plugin Guide</title>
<bookinfo>
 <authorgroup>
  <author><firstname>Dion</firstname><surname>Amago</surname></author>
 </authorgroup>

 <legalnotice><title>Legal Notice</title>
  <para>
   Permission is granted to copy, distribute and/or modify this document
   under the terms of the GNU Free Documentation License, Version 1.1 or
   any later version published by the Free Software Foundation; with no
   <quote>Invariant Sections</quote>, <quote>Front-Cover Texts</quote> or
   <quote>Back-Cover Texts</quote>, each as defined in the license. A copy of
   the license can be found in the file <filename>COPYING.DOC.txt</filename>
   included with jEdit.
  </para>

 </legalnotice>
 </bookinfo>

 <chapter id="intro">
  <title> Introduction </title>

 <para> Provides code completion, code browsing, and automatic imports for
         the <ulink url="http://haxe.org/">HaXe</ulink> language. 
 </para>
 </chapter>
 
 <chapter id="setup">
 <title> Setup and Configuration </title>
 

 
  <para> Haxe must be in your path for code completion to work.  
        To test this, open a shell or dos prompt and type "haxe". 
        If you see haxe related output, then good, otherwise see the 
  <ulink url="http://haxe.org/">HaXe</ulink> website for installation help.</para>
  
  <para> To display the class outline, Ctags must be installed. </para>
  
  </chapter> 
 <!--<title> Usage </title>-->
  
  
  <chapter id="code-completion">
   <title> Code Completion </title>
  <programlisting>
var someVar = "blah";
somevar.
</programlisting>

  <para> At the end of the code above, calling the "Code Completion" 
        command will show a list of class members and functions.  
        Select one for insertion.
        Code completion only works if you activate it immediately after a 
        period e.g. "someVariable." (including imports, but you don't need those 
        due to the auto-import feature). </para>
   </chapter>
   
   
     <chapter id="imports">
   <title> Imports </title>

  <para> The command "Add missing import" will search though 
  the source folders listed in the project hxml file, and try to match 
  classes used in the hx file with class and packages in the source folders.  
  For duplicates, a dialog will be shown.  Existing imports are not touched,
  in case you use imports that are not in the listed source folders. </para>
   </chapter>
   
      <chapter id="buildrun">
   <title> Building and running </title>

  <para> The command "Build project" will attempt to build the haxe project.  
  The error will be passed to the Error List plugin so you can navigate 
  directly to the source causing any compile problems.</para>
  
  <para> The command "Launch project" will attempt to build the haxe project, 
  and if successful, will launch the project.  Due to the many ways to launch 
  HaXe projects, the launch command must be given in the Plugin Options.</para>
   </chapter>
   
      <chapter id="ctags">
   <title>Code Browsing </title>

   <para> Like all "SideKick" plugins, this has no dockable
view. Instead, it shares its view with other SideKick plugins through
the SideKick Structure Browser. To use SideKick, dock the Structure
Browser on the left or the right. </para>

  <para> Code browsing relies on the CtagsInterface plugin.  
  As HaXe is not a standard langauage supported by Ctags, you have
  to add the following language definition to your ctags configuration 
  file (located at ~/.ctags on Mac and Linux)</para>

  
<programlisting>
--langdef=haxe
--langmap=haxe:.hx
--regex-haxe=/^[ \t]*import[ \t]+([A-Za-z0-9_.]+)[ \t]*; /\1/F,import, imports/
--regex-haxe=/^[ \t]*enum[ \t]+([A-Za-z0-9_]+).* /\1/e,enum, enumerators/
--regex-haxe=/^[ \t]*typedef[ \t]+([A-Za-z0-9_]+)[ \t]+.*/\1/t,typedef, typedefs/ 
--regex-haxe=/^[ \t]*((private|public|static|inline)[ \t]*)*[ \t]+var[ \t]+([A-Za-z0-9_]+)[ \t]*(: *([A-Za-z0-9_<,> ]+))?[ \t]*.*[;=].*/\3/v,variable, variables/ 
--regex-haxe=/^[ \t]*((private|public|static|override|inline|dynamic)[ \t]*)*[ \t]*function[ \t]+(([A-Za-z0-9_]+)[ \t]*.*)/\3/f,function, functions/ 
--regex-haxe=/^[ \t]*((private|public)[ \t]*)*(class|interface)[ \t]+([A-Za-z0-9_]+)[ \t]*($|((extends|implements)?[ \t]+([A-Za-z0-9_]+))?.*)/\1 \4 \7 \8 /c,class, classes/
</programlisting>
   </chapter>
 
<appendix id="changelog">
 <title> Changelog </title>
  <para> For a list of changes in this plugin, see the
  <ulink url="docs/CHANGES.txt">change log</ulink>.
  </para>
</appendix>


</book>
